You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

my approach:
Intuition
search first row then search column

Approach
First search the Target occur in which row and then find search that row to find the target.

Code
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n=len(matrix)
        m=len(matrix[0])
        low=0
        high=n-1
        search=float("inf")
        if matrix[0][0]>target or target>matrix[n-1][m-1]:
            return False
        while low<=high:
            mid=(low+high)//2
            print(low,high,mid)
            if matrix[mid][0]<=target and matrix[mid][m-1]>=target:
                print(matrix[mid][0])
                search=mid
                break
            elif matrix[mid][m-1]<target :
                low=mid+1
            elif matrix[mid][0]>target:
                high=mid-1
            
            
        # print(search)
        if search==float('inf'):
            return False
        for j in range(m):
            if matrix[search][j]==target:
                return True
        return False

solution:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n=len(matrix)
        m=len(matrix[0])
        if not matrix:
            return False
        low=0
        high=m*n-1
        while low<=high:
            mid=(low+high)//2
            midrow,midcol=divmod(mid,m)
            if matrix[midrow][midcol]==target:
                return True
            elif matrix[midrow][midcol]<target:
                low=mid+1
            else:
                high=mid-1
        return False
