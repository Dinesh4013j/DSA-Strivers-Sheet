Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n==0:
            return 1
        if n<0:
            x=1/x
            n=-n
        if n%2==0:
            return self.myPow(x*x,n//2)
        else:
            return x*self.myPow(x,n-1)

Explanation:
Base Case: If n == 0, return 1 because any number raised to the power of 0 is 1.
Negative Power: If n is negative, convert x to 1 / x and change n to its positive counterpart. This simplifies the handling of negative exponents.
Even Power: If n is even, recursively call self.myPow with x * x and n // 2. This leverages the property 


 , reducing the number of multiplications.
Odd Power: If n is odd, return x * self.myPow(x, n - 1). This reduces the problem size by one, making it eventually reach the base case.
