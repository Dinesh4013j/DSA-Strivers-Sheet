Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n=len(nums)
        s=set()
        nums.sort()
        for i in range(n):
            j=i+1
            k=n-1
            while j<k:
                cur=nums[i]+nums[j]+nums[k]
                if cur==0:
                    s.add((nums[i],nums[j],nums[k]))
                    j+=1
                elif cur>0:
                    k-=1
                else:
                    j+=1
        return list(s)
