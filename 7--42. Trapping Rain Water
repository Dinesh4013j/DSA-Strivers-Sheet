Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.


Method 1: Using prefix and suffix array for finding maximum
Code
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        left=[0]*n
        right=[0]*n
        maxi=0
        for i in range(n):
            if height[i]>maxi:
                maxi=height[i]
            left[i]=maxi
        maxi=0
        for i in range(n-1,-1,-1):
            if height[i]>maxi:
                maxi=height[i]
            right[i]=maxi
        ans=0
        for i in range(n):
            cur=min(left[i],right[i])
            if cur>height[i]:
                ans+=cur-height[i]
        return ans


Method 2:Using Two pointers
Code
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        res=0
        left=0
        right=n-1
        leftmax,rightmax=0,0
        while left<right:
            if height[left]<height[right]:
                if height[left]>leftmax:
                    leftmax=height[left]
                else:
                    res+=leftmax-height[left]
                left+=1
            else:
                if height[right]>rightmax:
                    rightmax=height[right]
                else:
                    res+=rightmax-height[right]
                right-=1
        return res
Method 3: Using mathematical calculation
Code
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        res=0
        for i in range(2,n):
        
            if height[i]>height[i-1]:
                maxi=height[i-1]
                for j in range(i-2,-1,-1):
                    if height[j]>maxi and height[j]>=height[i]:
                        res+=(height[i]-maxi)*(i-j-1)
                        break
                    elif height[j]>maxi:
                        res+=(height[j]-maxi)*(i-j-1)
                        maxi=height[j]
        return res
