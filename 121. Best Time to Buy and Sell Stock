You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell

mysolution:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices)
        maxi=[0]*n
        mini=[0]*n
        curmaxi=float("-inf")
        curmini=float("inf")
        n=len(prices)
        for i in range(n):
            curmini=min(curmini,prices[i])
            mini[i]=curmini
        for i in range(n-1,-1,-1):
            curmaxi=max(curmaxi,prices[i])
            maxi[i]=curmaxi
        res=0
        for i in range(n):
            res=max(maxi[i]-mini[i],res)
        return res
standard solution:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minprice=prices[0]
        maxprofit=0
        for current_price in prices:
            if current_price<minprice:
                minprice=current_price
            currentprofit=current_price-minprice
            if currentprofit>maxprofit:
                maxprofit=currentprofit
        return maxprofit
